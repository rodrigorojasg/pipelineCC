name: Generar funcionalidad desde historia de usuario

on:
  workflow_dispatch:
    inputs:
      historia_usuario:
        description: 'Historia de Usuario'
        required: true
        type: string
      repositorio_base:
        description: 'Repositorio base (ej: rodrigorojasg/testSpring)'
        required: true
        type: string

jobs:
  generar_codigo:
    runs-on: ubuntu-latest

    steps:

      - name: Verificar inputs
        run: |
          echo "Historia de Usuario: ${{ github.event.inputs.historia_usuario }}"
          echo "Repositorio base: ${{ github.event.inputs.repositorio_base }}"

      - name: Clonar repositorio base
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repositorio_base }}
          path: repositorio-base

      - name: Inspeccionar contenido clonado
        run: ls -R repositorio-base

      - name: Instalar dependencias necesarias
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip openjdk-17-jdk maven

      - name: Indexar clases Java existentes y preparar prompt
        run: |
          echo "📁 Buscando clases Java dentro de repositorio-base/src/main/java..."
          find repositorio-base/src/main/java -type f -name "*.java" > clases_existentes.txt

          if [ ! -s clases_existentes.txt ]; then
            echo "❌ No se encontraron archivos .java. Abortando."
            exit 1
          fi

          echo "✅ Clases detectadas:"
          cat clases_existentes.txt

          echo "Historia de usuario recibida:" > entrada_gpt.txt
          echo "${{ github.event.inputs.historia_usuario }}" >> entrada_gpt.txt
          echo -e "\nClases detectadas en el repositorio base:" >> entrada_gpt.txt
          cat clases_existentes.txt >> entrada_gpt.txt

          echo "📄 entrada_gpt.txt creada con el siguiente contenido:"
          cat entrada_gpt.txt

      - name: Llamar a OpenAI para generar clases
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          PROMPT="$(cat entrada_gpt.txt)"
          jq -n --arg prompt "$PROMPT" ' {
            model: "gpt-4",
            messages: [
              { "role": "system", "content": "Eres un generador de código Java experto en Spring Boot. Solo devuelve clases Java válidas, separadas por líneas que comiencen con 'package'. No incluyas comentarios explicativos ni texto adicional." },
              { "role": "user", "content": $prompt }
            ],
            temperature: 0.3
          }' > payload.json

          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload.json > respuesta_gpt.json

          cat respuesta_gpt.json  # Ver log completo de respuesta
          jq -r '.choices[0].message.content // "❌ No se encontró contenido válido en la respuesta de GPT."' respuesta_gpt.json > clases_generadas_completas.java

      - name: Separar clases generadas en archivos individuales
        run: |
          mkdir -p repositorio-base/src/main/java/ai/generated
          csplit --quiet --prefix=clase_ --suffix-format=%02d.java clases_generadas_completas.java "/^package /" {*}
          i=1
          for file in clase_*.java; do
            class_name=$(grep -oP 'public\s+(class|interface|enum)\s+\K\w+' "$file" | head -n 1)
            if [ -n "$class_name" ]; then
              mv "$file" "repositorio-base/src/main/java/ai/generated/${class_name}.java"
            else
              mv "$file" "repositorio-base/src/main/java/ai/generated/ClaseGenerada_$i.java"
            fi
            i=$((i+1))
          done

      - name: Commit y push a nueva rama
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          cd repositorio-base
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          git checkout -b feature/autogenerado-${{ github.run_id }}

          git add .
          
          if git diff --cached --quiet; then
            echo "⛔ No hay cambios para commitear, se omite push"
            exit 0
          fi

          git commit -m "🤖 Funcionalidad generada desde historia de usuario"

          # Setea el remote al repositorio base correcto
          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.event.inputs.repositorio_base }}.git

          git push origin HEAD

